// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  hashedPassword String?   @db.Text
  emailVerified  DateTime?
  image          String?

  accounts Account[]
  sessions Session[]
  Rating   Rating[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GameImage {
  id   String @id @default(cuid())
  data Bytes

  gameId String
  Game   Game   @relation(fields: [gameId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  GamesWithPosterHorizontal Game? @relation("posterHorizontal")
  GamesWithPosterVertical   Game? @relation("posterVertical")

  @@index([gameId])
}

model Game {
  id      String @id @default(cuid())
  name    String
  sinopse String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  releaseDate DateTime?

  deleted Boolean @default(false)

  publisherId String
  Publisher   Publisher @relation(fields: [publisherId], references: [id])

  Developers Developer[]

  Categories Category[]

  Platform Platform[]

  Character Character[]

  posterHorizontalId String?    @unique
  PosterHorizontal   GameImage? @relation("posterHorizontal", fields: [posterHorizontalId], references: [id])

  posterVerticalId String?    @unique
  PosterVertical   GameImage? @relation("posterVertical", fields: [posterVerticalId], references: [id])

  Images GameImage[]

  Rating Rating[]

  @@index([deleted])
  @@index([publisherId])
}

model Publisher {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  Games Game[]

  @@index([deleted])
}

model Developer {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  Games Game[]

  @@index([deleted])
}

model Category {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Games Game[]
}

model Platform {
  id   String @id @default(cuid())
  name String

  Games Game[]
}

enum StatusRating {
  Playing
  Finished
  Dropped
  PlanToPlay
}

model Rating {
  id          String       @id @default(cuid())
  rating      Int
  status      StatusRating
  hoursPlayed Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gameId String
  Game   Game   @relation(fields: [gameId], references: [id])

  userId String
  User   User   @relation(fields: [userId], references: [id])

  Review Review?

  @@index([gameId])
  @@index([userId])
}

model Review {
  id          String @id @default(cuid())
  title       String
  description String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  published Boolean @default(false)

  ratingId String @unique
  Rating   Rating @relation(fields: [ratingId], references: [id])

  @@index([published])
}

model Character {
  id          String @id @default(cuid())
  name        String
  description String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  Games Game[]

  image Bytes?

  @@index([deleted])
}
